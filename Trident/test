

local Config = {
    Esp = {
        Box = {
            Enabled = false,
            FilledColor = Color3.fromRGB(255, 0, 255),
            Filled = false,
            FilledTransparency = 0,
            Color = Color3.fromRGB(255, 0, 255),
        },
        Tracer = {
            Enabled = false,
            Color = Color3.fromRGB(255, 255, 255),
        },
        Sleeper = {
            Enabled = false,
            Text = "Sleeping",
            Color = Color3.fromRGB(255, 255, 255),
            Size = 7
        },
        Armor = {
            Enabled = false,
            Color = Color3.fromRGB(255, 255, 255),
            Size = 7
        },
        Distance = {
            Enabled = false,
            Color = Color3.fromRGB(255, 0, 255),
            Size = 7
        },
        Name = {
            Enabled = false,
            Color = Color3.fromRGB(255, 0, 255),
            Size = 7,
            Outline = false,
        },
        ViewAngle = {
            Enabled = false,
            Color = Color3.fromRGB(255, 0, 255),
        },
        CornerBoxes = {
            Enabled = false,
            Color = Color3.fromRGB(255, 255, 255),
            Size = 5,
            Thickness = 0,
        },
        Health = {
            Enabled = false,
            LowColor = Color3.fromRGB(255, 0, 255),
            HightColor = Color3.fromRGB(0, 0, 255),
        },
        Skeleton = {
            Enabled = false,
            Color = Color3.fromRGB(255, 255, 255),
        },
        Tool = {
            Enabled = false,
            Color = Color3.fromRGB(255, 255, 255),
            Outline = false,
            Size = 10,
        },
    },
}

local Hitbox = {
    Enabled = false,
    HitBX = 1.672248125076294,
    HitBY = 0.835624098777771,
    HitBZ = 0.835624098777771,
    Material = "ForceField",
    Color = Color3.fromRGB(255, 0, 255),
    Transparency = 0.6
}

local Camera = game:GetService("Workspace").CurrentCamera
local Plr = game:GetService("Players").LocalPlayer
local CharacterMiddle = game:GetService("Workspace").Ignore.LocalCharacter.Middle

local utility = {
    services = {
        players = cloneref(game:GetService("Players")),
        workspace = cloneref(game:GetService("Workspace")),
        userinputservice = cloneref(game:GetService("UserInputService")),
        runservice = cloneref(game:GetService("RunService")),
        httpservice = cloneref(game:GetService("HttpService")),
        coregui = cloneref(game:GetService("CoreGui")),
        lighting = cloneref(game:GetService("Lighting")),
        guiservice = cloneref(game:GetService("GuiService")),
        replicatedstorage = cloneref(game:GetService("ReplicatedStorage")),
        networkclient = cloneref(game:GetService("NetworkClient"))
    },
    functions = {}
}
local camera = utility.services.workspace.CurrentCamera

do
    local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Edaruph/My-Scripts/main/Main", true))()

        local Tabs = {
            Combat = Library:addTab("Combat", "http://www.roblox.com/asset/?id=17582422685"),
            Visuals = Library:addTab("Visuals", "http://www.roblox.com/asset/?id=17582428946"),
            World = Library:addTab("World", "http://www.roblox.com/asset/?id=17582463837"), 
            Settings = Library:addTab("Settings", "http://www.roblox.com/asset/?id=17582467390")
        }

        local HBE = Tabs.Combat:createGroup("left", "Hitbox Expander")
        _G.patrickcute = false
        _G.headx = 8
        _G.heady = 8
        _G.headz = 8
        local function modifyPlayerHeads()
            for _, v in next, game.Workspace:GetChildren() do
                if ((v.Name == "Model") and v:FindFirstChild("Head")) then
                    local head = v.Torso
                    if head then
                        local success, _ = pcall(function()
                                head.Size = Vector3.new(_G.headx, _G.heady, _G.headz)
                                head.Transparency = 0.5
                                head.CanCollide = false
                            end)
                        if not success then
                            warn("Failed to modify head for player:", v.Name)
                        end
                    end
                end
            end
        end

        game:GetService("RunService").RenderStepped:Connect(function()
                if _G.patrickcute then
                    modifyPlayerHeads()
                end
            end)
        HBE:addToggle({text = "Hitbox", default = false, flag = "Hitbox", callback = function(state)
                _G.patrickcute = state
            end})

        HBE:addSlider({
                text = "Hitbox X",
                min = 1,
                max = 14,
                suffix = "%",
                float = 1,
                default = 1,
                flag = "_G.headx",
                callback = function(Value)
                    _G.headx = Value
                end})

        HBE:addSlider({
                text = "Hitbox Y:",
                min = 1,
                max = 14,
                suffix = "%",
                float = 1,
                default = 1,
                flag = "_G.heady",
                callback = function(Value)
                    _G.heady = Value
                end})

        HBE:addSlider({
                text = "Hitbox Z:",
                min = 1,
                max = 14,
                suffix = "%",
                float = 1,
                default = 1,
                flag = "_G.headz",
                callback = function(Value)
                    _G.headz = Value
                end})

        local ExploitsTab = Tabs.Combat:createGroup('right', 'Exploits | Etc')
        
        local longneck = {
            LongNeckEnabled = false,
            UpperLimitDefault = 3,
            LowerLimitDefault = 1.75,
            CurrentSliderValue = 1.75,
            }
            
            local longNeckKeybindEnabled = false
            
            ExploitsTab:addToggle({text = "Long Neck", default = false, flag = "longneck_toggle", callback = function(Value)
            longneck.LongNeckEnabled = Value
            longNeckKeybindEnabled = Value
             if not longneck.LongNeckEnabled then
                game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.UpperLimitDefault
                game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.LowerLimitDefault
                else
                game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.CurrentSliderValue
                game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.CurrentSliderValue
             end
                end}):addKeybind({text = "Toggle Long Neck", default = Enum.KeyCode.Unknown, mode = "toggle", flag = "longneck_keybind", callback = function(Value)
                longNeckKeybindEnabled = not longNeckKeybindEnabled
                longneck.LongNeckEnabled = longNeckKeybindEnabled
                if not longneck.LongNeckEnabled then
                    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.UpperLimitDefault
                    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.LowerLimitDefault
                    else
                    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = longneck.CurrentSliderValue
                    game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = longneck.CurrentSliderValue
                    end
                    end})
                    
                    ExploitsTab:addSlider({text = "Height Changer:", suffix = "m", min = 3.75, max = 7.5, rounding = 2, default = 4.25, flag = "height_slider", callback = function(Value)
                    longneck.CurrentSliderValue = Value
                    if longneck.LongNeckEnabled then
                        game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = Value
                        game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = Value
                        end
                        end})


local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")


local function createJumpShootPart()
    local JSPart = Instance.new("Part", Workspace)
    JSPart.Name = "JumpShoot"
    JSPart.Size = Vector3.new(4, 0.2, 4)
    JSPart.Anchored = true

    JSPart.Color = Color3.fromRGB(202, 82, 147) 

    local forceField = Instance.new("SpecialMesh")
    forceField.Parent = JSPart
    forceField.MeshType = Enum.MeshType.FileMesh
    forceField.MeshId = "rbxassetid://20329976" 
    return JSPart
end

local function updateJumpShootPosition(JSPart)
    while true do
        local characterPosition = Workspace.Ignore.LocalCharacter.Middle.Position
        JSPart.Position = characterPosition - Vector3.new(0, 3.5, 0)
        RunService.Heartbeat:Wait()
    end
end

local JumpShootEnabled = false

local function toggleJumpShoot(state)
    JumpShootEnabled = state
    if JumpShootEnabled then
        if not JSPart then
            JSPart = createJumpShootPart()
            spawn(function()
                updateJumpShootPosition(JSPart)
            end)
        end
    else
        if JSPart then
            JSPart:Destroy()
            JSPart = nil
        end
    end
end

ExploitsTab:addToggle({
    text = "Jump Shoot",
    default = false,
    flag = "JumpShoot",
    callback = toggleJumpShoot
})
        
local field_of_viewtab = Tabs.Visuals:createGroup("right", "Fov/Zoom")
local default_fov = 70
local slider_fov = 60
local field_of_view = {enabled = false, amount = default_fov, zoomed = false, zoom_amount = 30}
    local fov_toggle =
        field_of_viewtab:addToggle({text = "Enabled", default = false, flag = "fov_changer_toggle", callback = function(value)
                field_of_view.enabled = value
                if field_of_view.enabled then
                    if field_of_view.zoomed then
                        camera.FieldOfView = field_of_view.zoom_amount
                    else
                        camera.FieldOfView = field_of_view.amount
                    end
                else
                    camera.FieldOfView = default_fov
                end
            end})
    local fov_keybind = fov_toggle:addKeybind({
            text = "Field of View:",
            type = "toggle",
            key = Enum.KeyCode.F,
            flag = "field_of_view_toggle",
            callback = function()
                if field_of_view.enabled then
                    if field_of_view.zoomed then
                        field_of_view.zoomed = false
                        camera.FieldOfView = field_of_view.amount
                    else
                        field_of_view.zoomed = true
                        camera.FieldOfView = field_of_view.zoom_amount
                    end
                end
            end})
    field_of_viewtab:addSlider({
            text = "field of view:",
            min = 30,
            max = 120,
            suffix = "x",
            float = 1,
            default = 70,
            flag = "fovamount_slider",
            callback = function(Value)
                field_of_view.ammount = Value
                if field_of_view.enabled then
                    camera.FieldOfView = field_of_view.ammount
                end
            end})
    field_of_viewtab:addToggle({text = "enabled", default = false, flag = "zoom_toggle", callback = function(Value)
                field_of_view.zoom_check = Value
            end}):addKeybind({text = "zoom", type = "Hold", key = Enum.KeyCode.Z, flag = "zoomkey_toggle", callback = function(Value)
                if field_of_view.zoom_check then
                    field_of_view.zoom = not field_of_view.zoom
                    if field_of_view.zoom then
                        camera.FieldOfView = field_of_view.zoom_ammount
                    else
                        camera.FieldOfView = default_fov
                    end
                else
                    camera.FieldOfView = default_fov
                end
            end})
    field_of_viewtab:addSlider({
            text = "zoom:",
            min = 1,
            max = 70,
            suffix = "x",
            float = 1,
            default = 30,
            flag = "zoomamount_slider",
            callback = function(Value)
                field_of_view.zoom_ammount = Value
                if field_of_view.zoom_check then
                    camera.FieldOfView = field_of_view.zoom_ammount
                end
            end})

    camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
            if (field_of_view.enabled and not field_of_view.zoom) then
                if (field_of_view.ammount ~= camera.FieldOfView) then
                    camera.FieldOfView = field_of_view.ammount
                end
            end
            if field_of_view.zoom then
                camera.FieldOfView = field_of_view.zoom_ammount
            end
        end)

        local Worldy = Tabs.World:createGroup("left", "World | Etc")
        local Lighting = game:GetService("Lighting")
        local Leaves = false
        local GlobalShadows = false
        local InfiniteFog = false
        local function destroyLeavesObjects()
            local descendants = workspace:GetDescendants()
            for _, obj in ipairs(descendants) do
                if (obj:IsA("BasePart") and ((obj.Name == "Fir3_Leaves") or (obj.Name == "Palm1_Leaves") or (obj.Name == "Birch1_Leaves") or (obj.Name == "Elm1_Leaves"))) then
                    obj:Destroy()
                end
            end
        end
        local function onLeavesToggled(state)
            Leaves = state
            if state then
                destroyLeavesObjects()
            end
        end
        local function onShadowsToggled(state)
            GlobalShadows = state
            Lighting.GlobalShadows = state
        end
        local function onFogToggled(state)
            InfiniteFog = state
            if state then
                Lighting.FogStart = math.huge
            else
                Lighting.FogStart = 0
            end
        end

        Worldy:addToggle({text = "Remove Leafs Wont Auto Updat", default = false, flag = "Leaves", callback = onLeavesToggled})
        Worldy:addToggle({text = "No Shadows", default = false, flag = "GlobalShadows", callback = onShadowsToggled})
        Worldy:addToggle({text = "No Fog", default = false, flag = "InfiniteFog", callback = onFogToggled})
        local RunService = game:GetService("RunService")
        local game = game
        local localDaytime = false
        local localTimeOfDay = 12
        game.Lighting.ClockTime = tostring(localTimeOfDay)
        local function updateLighting()
            if localDaytime then
                game.Lighting.ClockTime = tostring(localTimeOfDay)
            else
                game.Lighting.ClockTime = "0"
            end
        end

        Worldy:addToggle({text = "Time Of Day", default = false, flag = "localDaytime", callback = function(state)
            localDaytime = state
            updateLighting()
        end})

        Worldy:addSlider({
                text = "TimeOfDay Slider:",
                min = 0,
                max = 12,
                suffix = "%",
                float = 1,
                default = 1,
                flag = "localTimeOfDay",
                callback = function(Value)
                    if localDaytime then
                        localTimeOfDay = Value
                        updateLighting()
                    end
                end})
        RunService.RenderStepped:Connect(function()
                updateLighting()
            end)

            
            local Speed = Tabs.World:createGroup("left", "Speed Hack")
            local workspace = game:GetService("Workspace")
            local UserInputService = game:GetService("UserInputService")
            local RunService = game:GetService("RunService")
            local Character = workspace.Ignore.LocalCharacter.Middle
            local target = game:GetService("Workspace").Ignore.LocalCharacter
            local camera = game.Workspace.CurrentCamera
            local Position = "Down"
            _G.Speedy = false
            _G.Speedyk = false
            local acceleration = 0.5
            local maxSpeed = 200
            local currentSpeed = 25
            RunService.RenderStepped:Connect(function(deltaTime)
                    if _G.Speedy then
                        currentSpeed = math.min(currentSpeed + (acceleration * deltaTime), maxSpeed)
                        for i, v in pairs(game.Workspace.Ignore.LocalCharacter:GetChildren()) do
                            v.Velocity = v.Velocity + (game.Workspace.CurrentCamera.CFrame.LookVector * currentSpeed)
                        end
                    else
                        currentSpeed = 25
                    end
                end)
            UserInputService.InputBegan:Connect(function(input, g)
                    if ((input.KeyCode == Enum.KeyCode.U) and not g) then
                        if (_G.HPress == true) then
                            _G.HPress = false
                            _G.Speedyk = true
                        elseif (_G.HPress == false) then
                            _G.HPress = true
                            _G.Speedyk = false
                        end
                    end
                end)
            UserInputService.InputBegan:Connect(function(input, g)
                    if ((input.KeyCode == Enum.KeyCode.C) and _G.Speedyk and not g) then
                        _G.Speedy = true
                    end
                end)
            UserInputService.InputEnded:Connect(function(input, g)
                    if ((input.KeyCode == Enum.KeyCode.C) and not g) then
                        _G.Speedy = false
                    end
                end)
            local hopping = false
            RunService.RenderStepped:Connect(function()
                    if ((workspace.Ignore.LocalCharacter.Middle.LinearVelocity.MaxAxesForce == Vector3.new(0, 0, 0)) and (workspace.Ignore.LocalCharacter.Middle.Velocity.Y <= 0.2)) then
                        if not hopping then
                            hopping = true
                            Speedyk = true
                            Position = "Up"
                            wait(0.15)
                            Position = "Down"
                            Speedyk = false
                            wait(0.09)
                            hopping = false
                        end
                    end
                end)
            local Check = {}
            game:GetService("RunService").Heartbeat:Connect(function()
                    if (Speedyk == true) then
                        Check[1] = game.Workspace.Ignore.LocalCharacter.Middle.CFrame
                        local SpoofThis = game.Workspace.Ignore.LocalCharacter.Middle.CFrame
                        if (Position == "Up") then
                            SpoofThis = SpoofThis + Vector3.new(0, 5, 0)
                        elseif (Position == "Down") then
                            SpoofThis = SpoofThis
                        end
                        game.Workspace.Ignore.LocalCharacter.Middle.CFrame = SpoofThis
                        game:GetService("RunService").RenderStepped:Wait()
                        game.Workspace.Ignore.LocalCharacter.Middle.CFrame = Check[1]
                    end
                end)
            Speed:addToggle({text = "Speed Hack", default = false, flag = "_G.Speedyk", callback = function(state)
                        _G.Speedyk = state
                    end})
            Speed:addSlider({
                    text = "Set Speed:",
                    min = 1,
                    max = 80,
                    suffix = "%",
                    float = 1,
                    default = 25,
                    flag = "maxSpeed",
                    callback = function(Value)
                        maxSpeed = Value
                    end})
            Speed:addSlider({
                    text = "acceleration:",
                    min = 0.2,
                    max = 1.3,
                    suffix = "%",
                    float = 1,
                    default = 1,
                    flag = "acceleration",
                    callback = function(Value)
                        acceleration = Value
                    end})

            local Arrow = Tabs.Visuals:createGroup("right", "Arrow Trails")
            game:GetService("ReplicatedStorage").Arrow.Trail.Lifetime = 6
            game:GetService("ReplicatedStorage").Arrow.Trail.Brightness = 100
            game:GetService("ReplicatedStorage").Arrow.Trail.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 255)),ColorSequenceKeypoint.new(1, Color3.fromRGB(202, 0, 147))})
            Arrow:addToggle({text = "Arrow Trail", default = false, flag = "UpdateArrowTrail", callback = function(state)
                    end})
            Arrow:addToggle({text = "Arm | Weapon | Color", default = false, flag = "UpdateArrowTrail", callback = function(state)
                    end})

                    local workspace = game:GetService("Workspace")
        local fpsArms = workspace.Ignore.FPSArms
        local material = Enum.Material.ForceField
        local color = Color3.fromRGB(202, 82, 147)
        for _, part in pairs(fpsArms:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = material
                part.Color = color
            end
        end
        local replicatedStorage = game:GetService("ReplicatedStorage")
        local handModels = replicatedStorage:WaitForChild("HandModels")
        local material = Enum.Material.ForceField
        local color = Color3.fromRGB(202, 82, 147)
        for _, part in pairs(handModels:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = material
                part.Color = color
            end
        end
        local replicatedStorage = game:GetService("ReplicatedStorage")
        local handModels = replicatedStorage.HandModels
        local gone = false
        for _, descendant in ipairs(handModels:GetDescendants()) do
            if descendant:IsA("RopeConstraint") then
                descendant.Visible = gone
            end
        end

        local Boxes = Tabs.Visuals:createGroup('left', 'Boxes')

        Boxes:addToggle({text = "Box",default = false,flag = "box",callback = function(Value)
            Config.Esp.Box.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "boxespColor", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Box.Color = Value
        end})


        Boxes:addToggle({text = "Box Filled",default = false,flag = "filled_box",callback = function(Value)
            Config.Esp.Box.Filled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "filled_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Box.FilledColor = Value
        end})  

        Boxes:addToggle({text = "Corner Box",default = false,flag = "corner",callback = function(Value)
            Config.Esp.CornerBoxes.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "corner_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.CornerBoxes.Color = Value
        end}) 
        
        Boxes:addSlider({text = "Filled Transparency", min = 0, max = 1, suffix = "%", float = 0.1, default = 0.1, flag = "filled_tranasparency",callback = function(Value)
            Config.Esp.Box.FilledTransparency = Value
        end})

        local NameGroup = Tabs.Visuals:createGroup('left', 'Names')

        NameGroup:addToggle({text = "Names",default = false,flag = "names",callback = function(Value)
            Config.Esp.Name.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "names_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Name.Color = Value
        end}) 

        NameGroup:addToggle({text = "Outline",default = false,flag = "outline",callback = function(Value)
            Config.Esp.Name.Outline = Value
        end})

        NameGroup:addSlider({text = "Size", min = 0, max = 30, suffix = "%", float = 0.1, default = 0.1, flag = "name_slider",callback = function(Value)
            Config.Esp.Name.Size = Value
        end})

        local OthersGroup = Tabs.Visuals:createGroup('left', 'Others')

        OthersGroup:addToggle({text = "Tracers",default = false,flag = "Tracers",callback = function(Value)
            Config.Esp.Tracer.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "tracers_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Tracer.Color = Value
        end}) 

        OthersGroup:addToggle({text = "Skeleton",default = false,flag = "Skeleton",callback = function(Value)
            Config.Esp.Skeleton.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "skeleton_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Skeleton.Color = Value
        end}) 

        OthersGroup:addToggle({text = "View Angle",default = false,flag = "viewangle",callback = function(Value)
            Config.Esp.ViewAngle.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "viewangle_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.ViewAngle.Color = Value
        end}) 

        OthersGroup:addToggle({text = "Sleeper",default = false,flag = "sleeper",callback = function(Value)
            Config.Esp.Sleeper.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "sleeper_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Sleeper.Color = Value
        end}) 

        local DistanceGroup = Tabs.Visuals:createGroup('left', 'Distance')

        DistanceGroup:addToggle({text = "Distance",default = false,flag = "distance",callback = function(Value)
            Config.Esp.Distance.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "distance_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Distance.Color = Value
        end}) 

        DistanceGroup:addSlider({text = "Size", min = 0, max = 30, suffix = "%", float = 0.1, default = 0.1, flag = "distance_slider",callback = function(Value)
            Config.Esp.Distance.Size = Value
        end})


        local ItemsGroup = Tabs.Visuals:createGroup('right', 'Tool | Armor')

        ItemsGroup:addToggle({text = "Armors",default = false,flag = "armors",callback = function(Value)
            Config.Esp.Armor.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "armors_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Armor.Color = Value
        end})

        ItemsGroup:addToggle({text = "Tool",default = false,flag = "tools",callback = function(Value)
            Config.Esp.Tool.Enabled = Value
        end}):addColorpicker({text = "Color", ontop = false, flag = "tool_color", color = Color3.fromRGB(202, 82, 147), callback = function(Value)
            Config.Esp.Tool.Color = Value
        end}) 

        ItemsGroup:addToggle({text = "Outline",default = false,flag = "tooloutline",callback = function(Value)
            Config.Esp.Tool.Outline = Value
        end})

        ItemsGroup:addSlider({text = "Size", min = 0, max = 30, suffix = "%", float = 0.1, default = 0.1, flag = "name_slider",callback = function(Value)
            Config.Esp.Tool.Size = Value
        end})
        
        









       
        local Keyb = Tabs.Settings:createGroup('left', 'Settings')

        Keyb:addToggle({text = "Menu Bind",default = true,flag = "MenuBind_Toggle",callback = function(state)
        end}):addKeybind({text = "Menu Bind",type = "toggle",key = Enum.KeyCode.K,flag = "menubindkeybind_toggle",callback = function(state)
        Library.keybind = state
        end})





    end


    function Calculate_Magnitude(t)
        local Distance = CharacterMiddle:GetPivot().Position - t:GetPivot().Position
        local Index = tostring(Distance):find("%.")
        local Return = tonumber(string.sub(tostring(Distance), 1, Index - 1))
        return Return
    end
    
    function CreateEsp(Player)
        local Box = Drawing.new("Square")
        local BoxFilled = Drawing.new("Square")
        local Tracer = Drawing.new("Line")
        local Sleeper = Drawing.new("Text")
        local Armor = Drawing.new("Text")
        local Distance = Drawing.new("Text")
        local Name = Drawing.new("Text")
        local ViewAngle = Drawing.new("Line")
        local Tool = Drawing.new("Text")

        
        local CornerBoxes2 = {
            Line1 = Drawing.new("Line"),
            Line2 = Drawing.new("Line"),
            Line3 = Drawing.new("Line"),
            Line4 = Drawing.new("Line"),
            Line5 = Drawing.new("Line"),
            Line6 = Drawing.new("Line"),
            Line7 = Drawing.new("Line"),
            Line8 = Drawing.new("Line"),
        }

                
        local Skeleton = {
            Line1 = Drawing.new("Line"),
            Line2 = Drawing.new("Line"),
            Line3 = Drawing.new("Line"),
            Line4 = Drawing.new("Line"),
            Line5 = Drawing.new("Line"),
            Line6 = Drawing.new("Line"),
            Line7 = Drawing.new("Line"),
            Line8 = Drawing.new("Line"),
            Line9 = Drawing.new("Line"),
            Line10 = Drawing.new("Line"),
            Line11 = Drawing.new("Line"),
            Line12 = Drawing.new("Line"),
            Line13 = Drawing.new("Line"),
        }
    
        local esp = {
            health = Drawing.new("Line"),
            healthOutline = Drawing.new("Line"),
        }
    

    
    
        local Updater
    
        Updater = game:GetService("RunService").RenderStepped:Connect(function()
            if Player and Player:FindFirstChild("HumanoidRootPart") and Player:FindFirstChild("Head") then
                local rootPart = Player:FindFirstChild("HumanoidRootPart")
                local head = Player:FindFirstChild("Head")
                local Position,OnScreen = Camera:WorldToViewportPoint(Player:GetPivot().Position);
                local hrp2D = Camera:WorldToViewportPoint(rootPart.Position)
                local charSize = (Camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - Camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2
                local boxSize = Vector2.new(math.floor(charSize * 1.8), math.floor(charSize * 1.9))
                local boxPosition = Vector2.new(math.floor(hrp2D.X - charSize * 1.8 / 2), math.floor(hrp2D.Y - charSize * 1.6 / 2))
                local Target2dPosition, IsVisible = Camera:WorldToViewportPoint(Player.HumanoidRootPart.Position)
                local scale_factor = 1 / (Target2dPosition.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2) * 90
                local width, height = math.floor(38.4 * scale_factor), math.floor(63 * scale_factor)
                local scale = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 1.25) * 72;
                local w,h = math.floor(42 * scale), math.floor(72 * scale);
                local vec1, onscreen = Camera:WorldToViewportPoint(Player.Head.Position)
                local vec2, onscreen = Camera:WorldToViewportPoint(Player.LowerTorso.Position)
                local vec3, onscreen = Camera:WorldToViewportPoint(Player.Torso.Position)
                local vec4, onscreen = Camera:WorldToViewportPoint(Player.LeftUpperArm.Position)
                local vec5, onscreen = Camera:WorldToViewportPoint(Player.LeftLowerArm.Position)
                local vec6, onscreen = Camera:WorldToViewportPoint(Player.LeftHand.Position)
                local vec7, onscreen = Camera:WorldToViewportPoint(Player.RightUpperArm.Position)
                local vec8, onscreen = Camera:WorldToViewportPoint(Player.RightLowerArm.Position)
                local vec9, onscreen = Camera:WorldToViewportPoint(Player.RightHand.Position)
                local vec10, onscreen = Camera:WorldToViewportPoint(Player.LeftUpperLeg.Position)
                local vec11, onscreen = Camera:WorldToViewportPoint(Player.LeftLowerLeg.Position) 
                local vec12, onscreen = Camera:WorldToViewportPoint(Player.LeftFoot.Position)
                local vec13, onscreen = Camera:WorldToViewportPoint(Player.RightUpperLeg.Position)
                local vec14, onscreen = Camera:WorldToViewportPoint(Player.RightLowerLeg.Position)
                local vec15, onscreen = Camera:WorldToViewportPoint(Player.RightFoot.Position)
                local x, y = math.floor(Position.X), math.floor(Position.Y);

                local SkateToolName = "None"
                if Config.Esp.Tool.Enabled then
                    local ReplicatedStorage = game:GetService("ReplicatedStorage")
                    local HandModels = ReplicatedStorage:FindFirstChild("HandModels")
                    local integredantsTable = {}
                
                    if HandModels then
                        for _, model in pairs(HandModels:GetChildren()) do
                            local itemName = model.Name
                            local items = {}
                            for _, item in pairs(model:GetChildren()) do
                                table.insert(items, item.Name)
                            end
                            table.insert(integredantsTable, {itemName = itemName, items = items})
                        end
                    end
                
                    local handModelFound = false
                
                    for _, child in pairs(Player:GetChildren()) do
                        if child.Name == "HandModel" then
                            handModelFound = true
                            local matchedItems = {}
                            for _, item in pairs(child:GetChildren()) do
                                table.insert(matchedItems, item.Name)
                            end
                
                            for _, integredant in pairs(integredantsTable) do
                                local allMatch = true
                                for _, itemNameModel in pairs(integredant.items) do
                                    if not table.find(matchedItems, itemNameModel) then
                                        allMatch = false
                                        break
                                    end
                                end
                
                                if allMatch then
                                    SkateToolName = integredant.itemName
                                end
                            end
                        end
                    end
                
                    Tool.Size = Config.Esp.Tool.Size
                    Tool.Visible = IsVisible
                    Tool.Center = true
                    Tool.Outline = Config.Esp.Tool.Outline
                    Tool.Text = SkateToolName
                    Tool.Color = Config.Esp.Tool.Color
                    Tool.Position = Vector2.new(boxSize.X / 2 + boxPosition.X, boxPosition.Y - 20)
                else
                    Tool.Visible = false
                end
                


                if Config.Esp.Skeleton.Enabled then
                    Skeleton.Line1.From = Vector2.new(vec1.X, vec1.Y)
                    Skeleton.Line1.To = Vector2.new(vec2.X, vec2.Y)
                    Skeleton.Line1.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line2.From = Vector2.new(vec3.X, vec3.Y)
                    Skeleton.Line2.To = Vector2.new(vec4.X, vec4.Y)
                    Skeleton.Line2.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line3.From = Vector2.new(vec4.X, vec4.Y)
                    Skeleton.Line3.To = Vector2.new(vec5.X, vec5.Y + 3)
                    Skeleton.Line3.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line4.From = Vector2.new(vec5.X, vec5.Y)
                    Skeleton.Line4.To = Vector2.new(vec6.X, vec6.Y)
                    Skeleton.Line4.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line5.From = Vector2.new(vec3.X, vec3.Y)
                    Skeleton.Line5.To = Vector2.new(vec7.X, vec7.Y)
                    Skeleton.Line5.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line6.From = Vector2.new(vec7.X, vec7.Y)
                    Skeleton.Line6.To = Vector2.new(vec8.X, vec8.Y)
                    Skeleton.Line6.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line7.From = Vector2.new(vec8.X, vec8.Y)
                    Skeleton.Line7.To = Vector2.new(vec9.X, vec9.Y)
                    Skeleton.Line7.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line8.From = Vector2.new(vec2.X, vec2.Y)
                    Skeleton.Line8.To = Vector2.new(vec10.X, vec10.Y)
                    Skeleton.Line8.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line9.From = Vector2.new(vec10.X, vec10.Y)
                    Skeleton.Line9.To = Vector2.new(vec11.X, vec11.Y)
                    Skeleton.Line9.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line10.From = Vector2.new(vec11.X, vec11.Y)
                    Skeleton.Line10.To = Vector2.new(vec12.X, vec12.Y)
                    Skeleton.Line10.Color = Config.Esp.Skeleton.Color

                    Skeleton.Line11.From = Vector2.new(vec2.X, vec2.Y)
                    Skeleton.Line11.To = Vector2.new(vec13.X, vec13.Y)
                    Skeleton.Line11.Color = Config.Esp.Skeleton.Color
                
                    Skeleton.Line12.From = Vector2.new(vec13.X, vec13.Y)
                    Skeleton.Line12.To = Vector2.new(vec14.X, vec14.Y)
                    Skeleton.Line12.Color = Config.Esp.Skeleton.Color
                
                    Skeleton.Line13.From = Vector2.new(vec14.X, vec14.Y)
                    Skeleton.Line13.To = Vector2.new(vec15.X, vec15.Y)
                    Skeleton.Line13.Color = Config.Esp.Skeleton.Color

                      
                    for _, line in pairs(Skeleton) do
                        line.Visible = onscreen
                    end
                else
                    for _, line in pairs(Skeleton) do
                        line.Visible = false
                    end
                end
    
    
    
                if Config.Esp.CornerBoxes.Enabled then
                    local lineW = (boxSize.X / 5)
                    local lineH = (boxSize.Y / 6)
                    local lineT = 1
    
                    -- sol üst
                    CornerBoxes2.Line1.From = Vector2.new(boxPosition.X, boxPosition.Y)
                    CornerBoxes2.Line1.To = Vector2.new(boxPosition.X, boxPosition.Y + lineH)
                    CornerBoxes2.Line1.Color = Config.Esp.CornerBoxes.Color
    
                    CornerBoxes2.Line2.From = Vector2.new(boxPosition.X, boxPosition.Y)
                    CornerBoxes2.Line2.To = Vector2.new(boxPosition.X + lineW, boxPosition.Y)
                    CornerBoxes2.Line2.Color = Config.Esp.CornerBoxes.Color
    
                    -- sağ üst
                    CornerBoxes2.Line3.From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y)
                    CornerBoxes2.Line3.To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)
                    CornerBoxes2.Line3.Color = Config.Esp.CornerBoxes.Color
    
                    CornerBoxes2.Line4.From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y)
                    CornerBoxes2.Line4.To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + lineH)
                    CornerBoxes2.Line4.Color = Config.Esp.CornerBoxes.Color
    
                    -- sol alt
                    CornerBoxes2.Line5.From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y - lineH)
                    CornerBoxes2.Line5.To = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)
                    CornerBoxes2.Line5.Color = Config.Esp.CornerBoxes.Color
    
                    CornerBoxes2.Line6.From = Vector2.new(boxPosition.X, boxPosition.Y + boxSize.Y)
                    CornerBoxes2.Line6.To = Vector2.new(boxPosition.X + lineW, boxPosition.Y + boxSize.Y)
                    CornerBoxes2.Line6.Color = Config.Esp.CornerBoxes.Color
    
                    -- sağ alt
                    CornerBoxes2.Line7.From = Vector2.new(boxPosition.X + boxSize.X - lineW, boxPosition.Y + boxSize.Y)
                    CornerBoxes2.Line7.To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)
                    CornerBoxes2.Line7.Color = Config.Esp.CornerBoxes.Color
    
                    CornerBoxes2.Line8.From = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y - lineH)
                    CornerBoxes2.Line8.To = Vector2.new(boxPosition.X + boxSize.X, boxPosition.Y + boxSize.Y)
                    CornerBoxes2.Line8.Color = Config.Esp.CornerBoxes.Color
    
                    for _, line in pairs(CornerBoxes2) do
                        line.Visible = IsVisible
                    end
                else
                    for _, line in pairs(CornerBoxes2) do
                        line.Visible = false
                    end
                end
    
                if Config.Esp.Box.Enabled then
                    Box.Size = boxSize
                    Box.Position = boxPosition
                    Box.Color = Config.Esp.Box.Color
                    Box.Visible = true
                    BoxFilled.Filled = false
                    else
                    Box.Visible = false
                end
    
                if Config.Esp.Box.Filled then
                    BoxFilled.Visible = IsVisible
                    BoxFilled.Color = Config.Esp.Box.FilledColor
                    BoxFilled.Transparency = Config.Esp.Box.FilledTransparency
                    BoxFilled.Size = boxSize
                    BoxFilled.Position = boxPosition
                    BoxFilled.Filled = true
                    else
                    BoxFilled.Visible = false
                end
    
                if Config.Esp.Name.Enabled then
                    local NameTag = Player.Head:FindFirstChild("Nametag")
                    local Tag = "Player"
                    if NameTag.tag.Text == "" then
                        Tag = "Player"
                    else
                        Tag = NameTag.tag.Text
                    end
                    Name.Size = Config.Esp.Name.Size
                    Name.Visible = IsVisible
                    Name.Center = true
                    Name.Outline = Config.Esp.Name.Outline
                    Name.Text = Tag
                    Name.Color = Config.Esp.Name.Color
                    Name.Position = Vector2.new(x, math.floor(y - h * 0.5 - Name.TextBounds.Y))
                else
                    Name.Visible = false
                end
    
                local isPlayingAnimation = false
                if Player:FindFirstChild("AnimationController") then
                    for _, v in pairs(Player.AnimationController:GetPlayingAnimationTracks()) do
                        if v.Animation.AnimationId == "rbxassetid://13280887764" then
                            isPlayingAnimation = true
                            break
                        end
                    end
                end
    
                if Config.Esp.Sleeper.Enabled and isPlayingAnimation then
                    Sleeper.Size = Config.Esp.Sleeper.Size
                    Sleeper.Visible = IsVisible
                    Sleeper.Center = true
                    Sleeper.Outline = false
                    Sleeper.Text = Config.Esp.Sleeper.Text
                    Sleeper.Color = Config.Esp.Sleeper.Color
                    Sleeper.Position = Vector2.new(Target2dPosition.X, Target2dPosition.Y - height / 2 - 16)
                else
                    Sleeper.Visible = false
                end
    
                if Config.Esp.Armor.Enabled then
                    local ArmorFolder = Player:FindFirstChild("Armor")
                    if ArmorFolder then
                        local armorText = ""
                        for _, armorItem in pairs(ArmorFolder:GetChildren()) do
                            armorText = armorText .. armorItem.Name .. "\n"
                        end
                        Armor.Size = Config.Esp.Armor.Size
                        Armor.Visible = IsVisible
                        Armor.Center = true
                        Armor.Outline = false
                        Armor.Text = armorText
                        Armor.Color = Config.Esp.Armor.Color
                        Armor.Position = Vector2.new(Target2dPosition.X, Target2dPosition.Y + height / 2)
                    end
                else
                    Armor.Visible = false
                end
    
                if Config.Esp.Tracer.Enabled then
                    Tracer.Visible = IsVisible
                    Tracer.Color = Config.Esp.Tracer.Color
                    Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 1)
                    Tracer.To = Vector2.new(Target2dPosition.X, Target2dPosition.Y)
                else
                    Tracer.Visible = false
                end
    
                if Config.Esp.Distance.Enabled then
                    Distance.Size = Config.Esp.Distance.Size
                    Distance.Visible = IsVisible
                    Distance.Center = true
                    Distance.Outline = true
                    Distance.Text = tostring("[" .. math.floor(Calculate_Magnitude(Player))) .. "]"
                    Distance.Color = Config.Esp.Distance.Color
                    Distance.Position = Vector2.new(x, math.floor(y - h * 0.6)+Distance.TextBounds.Y)
                else
                    Distance.Visible = false
                end
    
                if Config.Esp.ViewAngle.Enabled then
                    local Head = Player:FindFirstChild("Head")
                    local headpos = Camera:WorldToViewportPoint(Head.Position)
                    local offsetCFrame = CFrame.new(0, 0, -4)
                    local dir = Player.Head.CFrame:ToWorldSpace(offsetCFrame)
                    offsetCFrame = offsetCFrame * CFrame.new(0, 0, 0.4)
                    local dirpos = Camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
                    ViewAngle.Visible = IsVisible
                    ViewAngle.Color = Config.Esp.ViewAngle.Color
                    ViewAngle.From = Vector2.new(headpos.X, headpos.Y)
                    ViewAngle.To = Vector2.new(dirpos.X, dirpos.Y)
                    else
                    ViewAngle.Visible = false
                end
            else
                Tool.Visible = false
                Box.Visible = false
                BoxFilled.Visible = false
                Tracer.Visible = false
                Sleeper.Visible = false
                Armor.Visible = false
                Distance.Visible = false
                Name.Visible = false
                ViewAngle.Visible = false
                for _, line in pairs(CornerBoxes2) do
                    line.Visible = false
                end
            
                for _, line in pairs(Skeleton) do
                    line.Visible = false
                end
    
                if not Player then
                    Tool:Remove()
                    Box:Remove()
                    BoxFilled:Remove()
                    Tracer:Remove()
                    Sleeper:Remove()
                    Armor:Remove()
                    Distance:Remove()
                    Name:Remove()
                    ViewAngle:Remove()
                    for _, line in pairs(CornerBoxes2) do
                        line:Remove()
                    end

                    for _, line in pairs(Skeleton) do
                        line:Remove()
                    end
    
                end
            end
        end)
    end
    
    for _, i in pairs(game:GetService("Workspace"):GetChildren()) do
        if i ~= game.Players.LocalPlayer.Character and i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("Head") then
            CreateEsp(i)
        end
    end
    
    game.Workspace.DescendantAdded:Connect(function(i)
        if i ~= game.Players.LocalPlayer.Character and i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("Head") then
            CreateEsp(i)
        end
    end)    

